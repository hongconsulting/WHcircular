// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/WHcircular_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// WH_rad_kappa
double WH_rad_kappa(const Eigen::VectorXd& theta);
RcppExport SEXP _WHcircular_WH_rad_kappa(SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(WH_rad_kappa(theta));
    return rcpp_result_gen;
END_RCPP
}
// WH_rad_mean
double WH_rad_mean(const Eigen::VectorXd& theta);
RcppExport SEXP _WHcircular_WH_rad_mean(SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(WH_rad_mean(theta));
    return rcpp_result_gen;
END_RCPP
}
// WH_rad_resultant
Eigen::VectorXd WH_rad_resultant(const Eigen::VectorXd& theta);
RcppExport SEXP _WHcircular_WH_rad_resultant(SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(WH_rad_resultant(theta));
    return rcpp_result_gen;
END_RCPP
}
// WH_CordeiroPaulaBotter
double WH_CordeiroPaulaBotter(const Eigen::VectorXd& theta, const Eigen::VectorXi& group);
RcppExport SEXP _WHcircular_WH_CordeiroPaulaBotter(SEXP thetaSEXP, SEXP groupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type group(groupSEXP);
    rcpp_result_gen = Rcpp::wrap(WH_CordeiroPaulaBotter(theta, group));
    return rcpp_result_gen;
END_RCPP
}
// WH_HHMM_to_rad
Eigen::VectorXd WH_HHMM_to_rad(const std::vector<std::string>& input);
RcppExport SEXP _WHcircular_WH_HHMM_to_rad(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(WH_HHMM_to_rad(input));
    return rcpp_result_gen;
END_RCPP
}
// WH_int_to_rad
Eigen::VectorXd WH_int_to_rad(const Eigen::VectorXi& x);
RcppExport SEXP _WHcircular_WH_int_to_rad(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXi& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(WH_int_to_rad(x));
    return rcpp_result_gen;
END_RCPP
}
// WH_rad_to_dHHMM
std::vector<std::string> WH_rad_to_dHHMM(const Eigen::VectorXd& input);
RcppExport SEXP _WHcircular_WH_rad_to_dHHMM(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(WH_rad_to_dHHMM(input));
    return rcpp_result_gen;
END_RCPP
}
// WH_rad_to_HHMM
std::vector<std::string> WH_rad_to_HHMM(const Eigen::VectorXd& input);
RcppExport SEXP _WHcircular_WH_rad_to_HHMM(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(WH_rad_to_HHMM(input));
    return rcpp_result_gen;
END_RCPP
}
// WH_reg_circlinear
WH_regfit WH_reg_circlinear(const Eigen::VectorXd& y, const Eigen::MatrixXd& X, double tol);
RcppExport SEXP _WHcircular_WH_reg_circlinear(SEXP ySEXP, SEXP XSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(WH_reg_circlinear(y, X, tol));
    return rcpp_result_gen;
END_RCPP
}
// WH_rad_sd
double WH_rad_sd(const Eigen::VectorXd& theta);
RcppExport SEXP _WHcircular_WH_rad_sd(SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(WH_rad_sd(theta));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_WHcircular_WH_rad_kappa", (DL_FUNC) &_WHcircular_WH_rad_kappa, 1},
    {"_WHcircular_WH_rad_mean", (DL_FUNC) &_WHcircular_WH_rad_mean, 1},
    {"_WHcircular_WH_rad_resultant", (DL_FUNC) &_WHcircular_WH_rad_resultant, 1},
    {"_WHcircular_WH_CordeiroPaulaBotter", (DL_FUNC) &_WHcircular_WH_CordeiroPaulaBotter, 2},
    {"_WHcircular_WH_HHMM_to_rad", (DL_FUNC) &_WHcircular_WH_HHMM_to_rad, 1},
    {"_WHcircular_WH_int_to_rad", (DL_FUNC) &_WHcircular_WH_int_to_rad, 1},
    {"_WHcircular_WH_rad_to_dHHMM", (DL_FUNC) &_WHcircular_WH_rad_to_dHHMM, 1},
    {"_WHcircular_WH_rad_to_HHMM", (DL_FUNC) &_WHcircular_WH_rad_to_HHMM, 1},
    {"_WHcircular_WH_reg_circlinear", (DL_FUNC) &_WHcircular_WH_reg_circlinear, 3},
    {"_WHcircular_WH_rad_sd", (DL_FUNC) &_WHcircular_WH_rad_sd, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_WHcircular(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
